version: '3.8'

services:
  # ---- Broker RabbitMQ ----
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"    # Port AMQP
      - "15672:15672"  # Port interface management
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    networks:
      - microservices-net

  # ---- Base de donn√©es MongoDB ----
  mongodb:
    image: mongo:5
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    networks:
      - microservices-net
    volumes:
      - mongo_data:/data/db

  # ---- AuthService ----
  authservice:
    build: 
      context: ./authservice    # Dockerfile et code dans /authservice
      dockerfile: Dockerfile
    container_name: authservice
    restart: unless-stopped
    depends_on:
      - mongodb
      - rabbitmq
    ports:
      - "3001:3001"
    environment:
      # Quelques variables d'exemple
      PORT: 3001
      JWT_SECRET_KEY: monSecretJWT
      MONGO_URI: mongodb://mongodb:27017/authdb
      RABBITMQ_URI: amqp://admin:admin@rabbitmq:5672
    networks:
      - microservices-net

  # ---- CombatService ----
  combatservice:
    build:
      context: ./combatservice
      dockerfile: Dockerfile
    container_name: combatservice
    restart: unless-stopped
    depends_on:
      - rabbitmq
    ports:
      - "3002:3002"
    environment:
      PORT: 3002
      JWT_SECRET_KEY: monSecretJWT
      RABBITMQ_URI: amqp://admin:admin@rabbitmq:5672
    networks:
      - microservices-net

  # ---- DungeonService ----
  dungeonservice:
    build:
      context: ./dungeonservice
      dockerfile: Dockerfile
    container_name: dungeonservice
    restart: unless-stopped
    depends_on:
      - mongodb
      - rabbitmq
    environment:
      MONGO_URI: mongodb://mongodb:27017/dungeondb
      RABBITMQ_URI: amqp://admin:admin@rabbitmq:5672
    networks:
      - microservices-net

  # ---- HeroService ----
  heroservice:
    build:
      context: ./heroservice
      dockerfile: Dockerfile
    container_name: heroservice
    restart: unless-stopped
    depends_on:
      - mongodb
      - rabbitmq
    environment:
      MONGO_URI: mongodb://mongodb:27017/heroesdb
      RABBITMQ_URI: amqp://admin:admin@rabbitmq:5672
    networks:
      - microservices-net

  # ---- LogService ----
  logservice:
    build:
      context: ./logservice
      dockerfile: Dockerfile
    container_name: logservice
    restart: unless-stopped
    depends_on:
      - mongodb
      - rabbitmq
    environment:
      MONGO_URI: mongodb://mongodb:27017/logsdb
      RABBITMQ_URI: amqp://admin:admin@rabbitmq:5672
    networks:
      - microservices-net

volumes:
  mongo_data:

networks:
  microservices-net:
    driver: bridge
